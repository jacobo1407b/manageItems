import React, { useState, FunctionComponent, useEffect } from 'react';
import { useRouter } from 'next/router'
import Head from 'next/head'
import { Grid } from "semantic-ui-react";
import { Image, Text, Textarea, Table, Button, Tooltip, Grid as Gr, Loading } from "@nextui-org/react";
import { AiOutlinePlusCircle, AiOutlineCloseCircle, AiFillSave } from "react-icons/ai";
import ModalBasic from '@components/Modal';
import UploadFile from '@components/UploadFile';
import { createApi } from "service/rest";
import { getChildV2 } from 'service/rest';


interface iTem {
    itemData: iItems
    hash: string,
    operation: string
}

const Item: FunctionComponent<iTem> = ({ hash, itemData, operation }) => {

    const router = useRouter()

    const [visible, setVisible] = useState(false);
    const [loading, setLoading] = useState(true);
    const [dataItem, setDataItem] = useState<iItems>();
    const [loadAttach, setLoadAttach] = useState(true);
    const [attachments, setAttachments] = useState<Array<Attachment>>()

    useEffect(() => {
        setDataItem(itemData);
        if (itemData.INVENTORY_ITEM_ID) {
            (async () => {
                let clientRest: any = createApi("/api");
                setAttachments(await clientRest.getattachmet(itemData.INVENTORY_ITEM_ID, itemData.ORG_ID))
                setLoadAttach(false);
            })()
        }

    }, [itemData])


    function openModal() {
        setVisible(true);

    }
    return (
        <>
            <Head>
                <title>Item - 23</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Grid stackable>
                <Grid.Row>
                    <Grid.Column width={2}>
                        <Button
                            color="success"
                            icon={loading ? null : <AiFillSave />}
                            auto>
                            {loading ? <Loading type="points" color="currentColor" size="sm" /> : "Guardar"}
                        </Button>
                    </Grid.Column>
                    <Grid.Column width={2}>
                        <Button
                            color="error"
                            icon={<AiOutlineCloseCircle />}
                            onPress={() => router.back()}
                            auto>
                            Cancelar
                        </Button>
                    </Grid.Column>
                </Grid.Row>
                <Grid.Row>
                    <Grid.Column width={6}>
                        carrousel image
                    </Grid.Column>
                    <Grid.Column width={10}>
                        <Grid >
                            <Grid.Column width={8}>
                                <Grid>
                                    <Grid.Row columns={2}>
                                        <Grid.Column width={5}><Text h3>Item</Text></Grid.Column>
                                        <Grid.Column width={10}><Text>{dataItem?.ITEM_NUMBER}</Text></Grid.Column>
                                    </Grid.Row>
                                    <Grid.Row columns={2}>
                                        <Grid.Column width={5}><Text h3>Descripci칩n</Text></Grid.Column>
                                        <Grid.Column width={10}>
                                            <Textarea
                                                bordered
                                                //value={dataItem?.DESCRIPTION}
                                                defaultValue={dataItem?.DESCRIPTION}
                                                color="secondary"
                                                labelPlaceholder="Descripci칩n"
                                            />
                                        </Grid.Column>
                                    </Grid.Row>
                                    <Grid.Row columns={2}>
                                        <Grid.Column width={5}><Text h3>Item class</Text></Grid.Column>
                                        <Grid.Column width={10}>{dataItem?.ITEM_CLASS}</Grid.Column>
                                    </Grid.Row>
                                    <Grid.Row columns={2}>
                                        <Grid.Column width={5}><Text h3>Aproval Status</Text></Grid.Column>
                                        <Grid.Column width={10}>{dataItem?.APPROVAL_STATUS}</Grid.Column>
                                    </Grid.Row>
                                    <Grid.Row columns={2}>
                                        <Grid.Column width={5}><Text h3>Creado por</Text></Grid.Column>
                                        <Grid.Column width={10}>{dataItem?.CREATED_BY}</Grid.Column>
                                    </Grid.Row>
                                </Grid>
                            </Grid.Column>
                            <Grid.Column width={8}>
                                <Grid>
                                    <Grid.Row columns={2}>
                                        <Grid.Column width={5}><Text h3>Item status</Text></Grid.Column>
                                        <Grid.Column width={10}><Text>{dataItem?.INVENTORY_ITEM_STATUS_CODE}</Text></Grid.Column>
                                    </Grid.Row>
                                    <Grid.Row columns={2}>
                                        <Grid.Column width={5}><Text h3>Clico de vida</Text></Grid.Column>
                                        <Grid.Column width={10}><Text>{dataItem?.LIFE_CYCLE}</Text></Grid.Column>
                                    </Grid.Row>
                                    <Grid.Row columns={2}>
                                        <Grid.Column width={5}><Text h3>User item type</Text></Grid.Column>
                                        <Grid.Column width={10}><Text>{dataItem?.ITEM_TYPE}</Text></Grid.Column>
                                    </Grid.Row>
                                    <Grid.Row columns={2}>
                                        <Grid.Column width={5}><Text h3>Pack type</Text></Grid.Column>
                                        <Grid.Column width={10}><Text>{dataItem?.PACK_TYPE}</Text></Grid.Column>
                                    </Grid.Row>
                                    <Grid.Row columns={2}>
                                        <Grid.Column width={5}><Text h3>Revision</Text></Grid.Column>
                                        <Grid.Column width={10}><Text>{dataItem?.REVISION}</Text></Grid.Column>
                                    </Grid.Row>
                                    <Grid.Row columns={2}>
                                        <Grid.Column width={5}><Text h3>Feche creaci칩n</Text></Grid.Column>
                                        <Grid.Column width={10}><Text>{dataItem?.CREATION_DATE}</Text></Grid.Column>
                                    </Grid.Row>
                                </Grid>
                            </Grid.Column>
                        </Grid>
                    </Grid.Column>
                </Grid.Row>
                <Grid.Row>
                    <Gr.Container>
                        <Gr>
                            <Tooltip content="Agregar Attachment" color="primary" placement="right">
                                <Button auto light onClick={openModal}>
                                    <AiOutlinePlusCircle color="green" size={20} />
                                </Button>
                            </Tooltip>
                        </Gr>
                        <Gr>
                            <Tooltip content="Eliminar Attachment" color="error" placement="right">
                                <Button auto light>
                                    <AiOutlineCloseCircle color="red" size={20} />
                                </Button>
                            </Tooltip>
                        </Gr>
                    </Gr.Container>
                </Grid.Row>
                <Grid.Row>
                    <Grid.Column width={16}>
                        <Table
                            aria-label="Example table with custom cells"
                            css={{
                                height: "auto",
                                minWidth: "100%",
                            }}
                            selectionMode="none"
                        >
                            <Table.Header>
                                <Table.Column
                                >
                                    Titulos
                                </Table.Column>
                                <Table.Column
                                >
                                    Descripcion
                                </Table.Column>
                                <Table.Column
                                >
                                    Categoria
                                </Table.Column>
                                <Table.Column
                                >
                                    Tama침o
                                </Table.Column>

                            </Table.Header>
                            <Table.Body>
                                <Table.Row>
                                    <Table.Cell>line1</Table.Cell>
                                    <Table.Cell>line2</Table.Cell>
                                    <Table.Cell>line3</Table.Cell>
                                    <Table.Cell>line2</Table.Cell>
                                </Table.Row>
                            </Table.Body>
                        </Table>
                    </Grid.Column>
                </Grid.Row>
            </Grid>
            <ModalBasic
                visible={visible}
                closeHandler={setVisible}
                textAcep="Cargar"
                title='Cargar Attachment'
                children={<UploadFile />}
            />
        </>
    )
}

export default Item


export const getServerSideProps = async (ctx: any) => {
    const { org, item } = ctx.query
    let hasChild: string = "";
    let data = await getChildV2(org, item);
    if (data) {
        let child = data.links[0].href.split("/")
        hasChild = child[child.length - 1]
    }
    let objectView = {
        ITEM_NUMBER: item,
        DESCRIPTION: data?.ItemDescription ?? "",
        ITEM_CLASS: data?.ItemClass ?? "",
        APPROVAL_STATUS: data?.ApprovalStatusValue ?? "",
        CREATED_BY: data?.CreatedBy ?? "",
        INVENTORY_ITEM_STATUS_CODE: data?.ItemStatusValue ?? "",
        LIFE_CYCLE: data?.LifecyclePhaseValue ?? "",
        ITEM_TYPE: data?.UserItemTypeValue ?? "",
        PACK_TYPE: data?.PackTypeValue ?? "",
        REVISION: 0,
        CREATION_DATE: data?.CreationDateTime ?? "",
        INVENTORY_ITEM_ID: data?.ItemId ?? "",
        ORG_ID: data?.OrganizationId ?? ""
    }
    return {
        props: {
            itemData: objectView,
            hash: hasChild,
            operation: hasChild ? "UPDATE" : "CREATE"
        },
    }
}
